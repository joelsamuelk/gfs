input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

enum ENUM_SHIPMENTS_STATUS {
  Loaded
  In_Transit
  Discharged
  Gated_Out
  Cancelled
  Claimed
  Claim_in_Progress
}

enum ENUM_SHIPMENTS_SHIPPING_LINE {
  MSC
  Maersk
  Niledutch
  Cma_Cgm
}

type Shipments {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  vessel: String!
  Port_Of_Load: String!
  Container_No: String
  Departure: Date!
  Arrival: Date!
  Status: ENUM_SHIPMENTS_STATUS!
  Shipping_Line: ENUM_SHIPMENTS_SHIPPING_LINE
  user: UsersPermissionsUser
  published_at: DateTime
  Documents(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  suppliers(sort: String, limit: Int, start: Int, where: JSON): [Supplier]
}

type ShipmentsConnection {
  values: [Shipments]
  groupBy: ShipmentsGroupBy
  aggregate: ShipmentsAggregator
}

type ShipmentsAggregator {
  count: Int
  totalCount: Int
}

type ShipmentsGroupBy {
  id: [ShipmentsConnectionId]
  created_at: [ShipmentsConnectionCreated_at]
  updated_at: [ShipmentsConnectionUpdated_at]
  vessel: [ShipmentsConnectionVessel]
  Port_Of_Load: [ShipmentsConnectionPort_Of_Load]
  Container_No: [ShipmentsConnectionContainer_No]
  Departure: [ShipmentsConnectionDeparture]
  Arrival: [ShipmentsConnectionArrival]
  Status: [ShipmentsConnectionStatus]
  Shipping_Line: [ShipmentsConnectionShipping_Line]
  user: [ShipmentsConnectionUser]
  published_at: [ShipmentsConnectionPublished_at]
}

type ShipmentsConnectionId {
  key: ID
  connection: ShipmentsConnection
}

type ShipmentsConnectionCreated_at {
  key: DateTime
  connection: ShipmentsConnection
}

type ShipmentsConnectionUpdated_at {
  key: DateTime
  connection: ShipmentsConnection
}

type ShipmentsConnectionVessel {
  key: String
  connection: ShipmentsConnection
}

type ShipmentsConnectionPort_Of_Load {
  key: String
  connection: ShipmentsConnection
}

type ShipmentsConnectionContainer_No {
  key: String
  connection: ShipmentsConnection
}

type ShipmentsConnectionDeparture {
  key: ID
  connection: ShipmentsConnection
}

type ShipmentsConnectionArrival {
  key: ID
  connection: ShipmentsConnection
}

type ShipmentsConnectionStatus {
  key: String
  connection: ShipmentsConnection
}

type ShipmentsConnectionShipping_Line {
  key: String
  connection: ShipmentsConnection
}

type ShipmentsConnectionUser {
  key: ID
  connection: ShipmentsConnection
}

type ShipmentsConnectionPublished_at {
  key: DateTime
  connection: ShipmentsConnection
}

input ShipmentInput {
  vessel: String!
  Port_Of_Load: String!
  Container_No: String
  Departure: Date!
  Arrival: Date!
  Status: ENUM_SHIPMENTS_STATUS!
  Documents: [ID]
  Shipping_Line: ENUM_SHIPMENTS_SHIPPING_LINE
  suppliers: [ID]
  user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShipmentInput {
  vessel: String
  Port_Of_Load: String
  Container_No: String
  Departure: Date
  Arrival: Date
  Status: ENUM_SHIPMENTS_STATUS
  Documents: [ID]
  Shipping_Line: ENUM_SHIPMENTS_SHIPPING_LINE
  suppliers: [ID]
  user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createShipmentInput {
  data: ShipmentInput
}

type createShipmentPayload {
  shipment: Shipments
}

input updateShipmentInput {
  where: InputID
  data: editShipmentInput
}

type updateShipmentPayload {
  shipment: Shipments
}

input deleteShipmentInput {
  where: InputID
}

type deleteShipmentPayload {
  shipment: Shipments
}

enum ENUM_SUPPLIER_NAME {
  Dakahlia
  Idea_Fruit
  Fruit_secure
  Fruitways
  Zest_Fruit
  Into_asia
  Jaguar
  Kalinex_Fruit
  Wadi_Group
}

type Supplier {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: ENUM_SUPPLIER_NAME
  published_at: DateTime
  shipments(sort: String, limit: Int, start: Int, where: JSON): [Shipments]
}

type SupplierConnection {
  values: [Supplier]
  groupBy: SupplierGroupBy
  aggregate: SupplierAggregator
}

type SupplierAggregator {
  count: Int
  totalCount: Int
}

type SupplierGroupBy {
  id: [SupplierConnectionId]
  created_at: [SupplierConnectionCreated_at]
  updated_at: [SupplierConnectionUpdated_at]
  name: [SupplierConnectionName]
  published_at: [SupplierConnectionPublished_at]
}

type SupplierConnectionId {
  key: ID
  connection: SupplierConnection
}

type SupplierConnectionCreated_at {
  key: DateTime
  connection: SupplierConnection
}

type SupplierConnectionUpdated_at {
  key: DateTime
  connection: SupplierConnection
}

type SupplierConnectionName {
  key: String
  connection: SupplierConnection
}

type SupplierConnectionPublished_at {
  key: DateTime
  connection: SupplierConnection
}

input SupplierInput {
  name: ENUM_SUPPLIER_NAME
  shipments: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSupplierInput {
  name: ENUM_SUPPLIER_NAME
  shipments: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSupplierInput {
  data: SupplierInput
}

type createSupplierPayload {
  supplier: Supplier
}

input updateSupplierInput {
  where: InputID
  data: editSupplierInput
}

type updateSupplierPayload {
  supplier: Supplier
}

input deleteSupplierInput {
  where: InputID
}

type deleteSupplierPayload {
  supplier: Supplier
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

enum ENUM_USERSPERMISSIONSUSER_COMPANY {
  Tropical_fruits
  Gfs_sarl_reunion
  Orange_fraiche
  Mkm_solution
  Cao
  Caudex
  Passion_des_fruits
  A_Chinatamby_Co_Ltd
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  Company: ENUM_USERSPERMISSIONSUSER_COMPANY
  shipments(sort: String, limit: Int, start: Int, where: JSON): [Shipments]
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  Company: [UsersPermissionsUserConnectionCompany]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCompany {
  key: String
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  shipments: [ID]
  Company: ENUM_USERSPERMISSIONSUSER_COMPANY
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  shipments: [ID]
  Company: ENUM_USERSPERMISSIONSUSER_COMPANY
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Shipments | ShipmentsConnection | ShipmentsAggregator | ShipmentsGroupBy | ShipmentsConnectionId | ShipmentsConnectionCreated_at | ShipmentsConnectionUpdated_at | ShipmentsConnectionVessel | ShipmentsConnectionPort_Of_Load | ShipmentsConnectionContainer_No | ShipmentsConnectionDeparture | ShipmentsConnectionArrival | ShipmentsConnectionStatus | ShipmentsConnectionShipping_Line | ShipmentsConnectionUser | ShipmentsConnectionPublished_at | createShipmentPayload | updateShipmentPayload | deleteShipmentPayload | Supplier | SupplierConnection | SupplierAggregator | SupplierGroupBy | SupplierConnectionId | SupplierConnectionCreated_at | SupplierConnectionUpdated_at | SupplierConnectionName | SupplierConnectionPublished_at | createSupplierPayload | updateSupplierPayload | deleteSupplierPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCompany | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  shipment(id: ID!, publicationState: PublicationState): Shipments
  shipments(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Shipments]
  shipmentsConnection(sort: String, limit: Int, start: Int, where: JSON): ShipmentsConnection
  supplier(id: ID!, publicationState: PublicationState): Supplier
  suppliers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Supplier]
  suppliersConnection(sort: String, limit: Int, start: Int, where: JSON): SupplierConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createShipment(input: createShipmentInput): createShipmentPayload
  updateShipment(input: updateShipmentInput): updateShipmentPayload
  deleteShipment(input: deleteShipmentInput): deleteShipmentPayload
  createSupplier(input: createSupplierInput): createSupplierPayload
  updateSupplier(input: updateSupplierInput): updateSupplierPayload
  deleteSupplier(input: deleteSupplierInput): deleteSupplierPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
