/// <reference types="node" />
import { EventEmitter } from 'events';
import { SyncClient } from 'twilio-sync';
import { Configuration } from './configuration';
import { CommandExecutor } from './commandexecutor';
export interface UserServices {
    syncClient: SyncClient;
    commandExecutor: CommandExecutor;
}
interface UserLinks {
    self: string;
}
declare namespace User {
    type SubscriptionState = 'initializing' | 'subscribed' | 'unsubscribed';
    type UpdateReason = 'friendlyName' | 'attributes' | 'online' | 'notifiable';
    interface UpdatedEventArgs {
        user: User;
        updateReasons: User.UpdateReason[];
    }
}
/**
 * @classdesc Extended user information.
 * Note that <code>online</code> and <code>notifiable</code> properties are eligible
 * to use only if reachability function is enabled.
 * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.
 *
 * @property {String} identity - User identity
 * @property {String} friendlyName - User friendly name, null if not set
 * @property {any} attributes - Object with custom attributes for user
 * @property {Boolean} online - User real-time channel connection status
 * @property {Boolean} notifiable - User push notification registration status
 * @property {Boolean} isSubscribed - Check if this user receives real-time status updates
 *
 * @fires User#updated
 * @fires User#userSubscribed
 * @fires User#userUnsubscribed
 *
 * @constructor
 * @param {String} identity - Identity of user
 * @param {String} entityId - id of user's object
 * @param {Object} datasync - datasync service
 */
declare class User extends EventEmitter {
    private readonly links;
    private readonly configuration;
    private readonly services;
    private entity;
    private state;
    private promiseToFetch;
    private subscribed;
    constructor(identity: string, entityName: string, links: UserLinks, configuration: Configuration, services: UserServices);
    /**
     * The update reason for <code>updated</code> event emitted on User
     * @typedef {('friendlyName' | 'attributes' | 'online' | 'notifiable')} User#UpdateReason
     */
    get identity(): string;
    set identity(identity: string);
    set entityName(name: string);
    get attributes(): any;
    get friendlyName(): string;
    get online(): boolean;
    get notifiable(): boolean;
    get isSubscribed(): boolean;
    _update(key: string, value: any): void;
    private _updateReachabilityInfo;
    _fetch(): Promise<User>;
    _ensureFetched(): Promise<User>;
    /**
     * Updates user attributes.
     * @param {any} attributes new attributes for User.
     * @returns {Promise<User>}
     */
    updateAttributes(attributes: any): Promise<User>;
    /**
     * Update Users friendlyName.
     * @param {String} friendlyName - Updated friendlyName
     * @returns {Promise<User>}
     */
    updateFriendlyName(friendlyName: any): Promise<User>;
    /**
     * Removes User from subscription list.
     * @returns {Promise<void>} Promise of completion
     */
    unsubscribe(): Promise<void>;
}
export { User };
/**
 * Fired when User's properties or reachability status have been updated.
 * @event User#updated
 * @type {Object}
 * @property {User} user - Updated User
 * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons
 */
/**
 * Fired when Client is subscribed to User.
 * @event User#userSubscribed
 * @type {User}
 */
/**
 * Fired when Client is unsubscribed from this User.
 * @event User#userUnsubscribed
 * @type {User}
 */
