/// <reference types="node" />
import { EventEmitter } from 'events';
interface Result<T> {
    status: {
        code: number;
        status: string;
    };
    headers: {
        [id: string]: string;
    };
    body?: T;
}
interface Transport extends EventEmitter {
    readonly isConnected: boolean;
    readonly state: string;
    get<T>(url: string, headers: any, grant?: string): Promise<Result<T>>;
    post<T>(url: string, headers: any, body: any, grant?: string): Promise<Result<T>>;
    put<T>(url: string, headers: any, body: any, grant?: string): Promise<Result<T>>;
    delete<T>(url: string, headers: any, grant?: string): Promise<Result<T>>;
}
export { Result, Transport };
