/// <reference types="node" />
import { EventEmitter } from 'events';
import { Channel } from '../channel';
import { SyncClient } from 'twilio-sync';
import { ChannelDescriptor } from '../channeldescriptor';
import { Users } from './users';
import { Network } from '../services/network';
import { TypingIndicator } from '../services/typingindicator';
import { McsClient } from 'twilio-mcs-client';
import { Configuration } from '../configuration';
import { CommandExecutor } from '../commandexecutor';
export interface ChannelsServices {
    syncClient: SyncClient;
    users: Users;
    typingIndicator: TypingIndicator;
    network: Network;
    mcsClient: McsClient;
    commandExecutor: CommandExecutor;
}
/**
 * Represents channels collection
 * {@see Channel}
 */
declare class Channels extends EventEmitter {
    private readonly configuration;
    private readonly services;
    readonly channels: Map<string, Channel>;
    private readonly tombstones;
    private myChannelsFetched;
    private myChannelsRead;
    constructor(configuration: Configuration, services: ChannelsServices);
    private getMap;
    /**
     * Add channel to server
     * @private
     * @returns {Promise<Channel>} Channel
     */
    addChannel(options: any): Promise<Channel>;
    /**
     * Fetch channels list and instantiate all necessary objects
     */
    fetchChannels(): Promise<this>;
    private _wrapPaginator;
    getChannels(args: any): Promise<any>;
    getChannel(sid: string): Promise<Channel>;
    pushChannel(descriptor: ChannelDescriptor): Promise<Channel>;
    private _updateChannel;
    private upsertChannel;
    private onChannelRemoved;
    private registerForEvents;
    private _fetchMyChannels;
}
declare namespace Channels {
    type DataSource = 'sync' | 'chat' | 'rest';
}
export { Channel, Channels };
