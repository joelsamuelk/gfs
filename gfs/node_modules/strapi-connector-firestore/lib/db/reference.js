"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reference = exports.isEqualHandlingRef = void 0;
const _ = require("lodash");
/**
 * Deep equality algorithm based on `_.isEqual()` with special handling
 * of objects that have their own `isEqual()` method, such as `Reference`.
 */
function isEqualHandlingRef(a, b) {
    return _.isEqualWith(a, b, (aValue, bValue) => {
        if (aValue && (typeof aValue === 'object')) {
            const { isEqual } = aValue;
            if (typeof isEqual === 'function') {
                return isEqual.bind(aValue)(bValue);
            }
        }
        return undefined;
    });
}
exports.isEqualHandlingRef = isEqualHandlingRef;
/**
 * Common interface for normal, flattened, and polymorphic references.
 * References perform coercion on input data according to the model
 * schema that they belong to.
 */
class Reference {
    toString() {
        return this.path;
    }
}
exports.Reference = Reference;
