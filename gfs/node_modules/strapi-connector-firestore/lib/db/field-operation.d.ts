import { FieldValue } from '@google-cloud/firestore';
/**
 * Acts as a wrapper for Firestore's `FieldValue` but allows
 * manual implementation (where Firestore's) API is not public.
 */
export declare abstract class FieldOperation {
    static delete(): FieldOperation;
    static increment(n: number): FieldOperation;
    static arrayRemove(...items: any[]): FieldOperation;
    static arrayUnion(...items: any[]): FieldOperation;
    /**
     * Sets the given value and the given path or applies the
     * transform if the value is a transform.
     */
    static apply(data: any, fieldPath: string, valueOrOperation: any): void;
    /**
     * Converts the operation to its Firestore-native
     * `FieldValue` equivalent.
     */
    abstract toFirestoreValue(): FieldValue;
    /**
     * Performs the operation on the given data.
     */
    abstract transform(value: any): any;
    /**
     * Returns another instance of this operation which
     * has any values coerced using the given function.
     * @param coerceFn The function that coerces each value
     */
    abstract coerceWith(coerceFn: (value: any) => any): FieldOperation;
    /**
     * @deprecated Unsupported operation
     */
    toJSON(): never;
}
