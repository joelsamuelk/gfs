"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MorphReference = void 0;
const deep_reference_1 = require("./deep-reference");
const reference_1 = require("./reference");
/**
 * Acts as a wrapper around a `NormalReference` or a `DeepReference`
 * with additional field/filter information for polymorphic references.
 */
class MorphReference extends reference_1.Reference {
    constructor(ref, filter) {
        super();
        this.ref = ref;
        this.filter = filter;
    }
    get parent() {
        return this.ref.parent;
    }
    get id() {
        return this.ref.id;
    }
    get path() {
        return this.ref.path;
    }
    get firestore() {
        return this.ref.firestore;
    }
    delete(opts) {
        return this.ref.delete();
    }
    ;
    create(data, opts) {
        return this.ref.create(data, opts);
    }
    ;
    update(data, opts) {
        return this.ref.update(data, opts);
    }
    /**
     * Performs a `create()`, `update()`, or `delete()` operation without any coercion or lifecycles.
     * @private
     * @deprecated For internal connector use only
     */
    writeInternal(data, editMode) {
        return this.ref.writeInternal(data, editMode);
    }
    get() {
        return this.ref.get();
    }
    isEqual(other) {
        return (this === other) ||
            (other instanceof MorphReference
                && this.ref.isEqual(other.ref)
                && (this.filter === other.filter));
    }
    /**
     * Allow serialising to JSON.
     */
    toJSON() {
        // This Strapi behaviour isn't really documented
        const { model } = this.ref.parent;
        return {
            ref: model.modelName,
            kind: model.globalId,
            source: model.plugin,
            refId: this.id,
            field: this.filter || undefined,
        };
    }
    /**
     * Returns a value that can be serialised
     * to Firestore.
     */
    toFirestoreValue() {
        const value = this.ref instanceof deep_reference_1.DeepReference
            ? { ...this.ref.toFirestoreValue(), filter: this.filter }
            : { ref: this.ref.toFirestoreValue(), filter: this.filter };
        return value;
    }
    toString() {
        return this.id;
    }
}
exports.MorphReference = MorphReference;
