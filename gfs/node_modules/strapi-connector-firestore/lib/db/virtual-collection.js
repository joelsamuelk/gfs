"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualCollection = void 0;
const convert_where_1 = require("../utils/convert-where");
const coerce_to_firestore_1 = require("../coerce/coerce-to-firestore");
const coerce_to_model_1 = require("../coerce/coerce-to-model");
const virtual_reference_1 = require("./virtual-reference");
const manual_filter_1 = require("../utils/manual-filter");
class VirtualCollection {
    constructor(modelOrOther) {
        this.manualFilters = [];
        this._orderBy = [];
        if (modelOrOther instanceof VirtualCollection) {
            // Copy the values
            this.model = modelOrOther.model;
            this.converter = modelOrOther.converter;
            this.dataSource = modelOrOther.dataSource;
            this.data = modelOrOther.data;
            this.manualFilters = modelOrOther.manualFilters.slice();
            this._orderBy = modelOrOther._orderBy.slice();
            this._limit = modelOrOther._limit;
            this._offset = modelOrOther._offset;
        }
        else {
            this.model = modelOrOther;
            this.dataSource = modelOrOther.options.virtualDataSource;
            const { toFirestore = (value) => value, fromFirestore = (value) => value, } = modelOrOther.options.converter;
            this.converter = {
                toFirestore: data => {
                    const d = (0, coerce_to_firestore_1.coerceModelToFirestore)(modelOrOther, data);
                    return toFirestore(d);
                },
                fromFirestore: snap => {
                    const d = fromFirestore(snap);
                    return (0, coerce_to_model_1.coerceToModel)(modelOrOther, snap.id, d, null, {});
                },
            };
        }
    }
    get path() {
        return this.model.collectionName;
    }
    autoId() {
        return this.model.firestore.collection(this.path).doc().id;
    }
    doc(id) {
        return new virtual_reference_1.VirtualReference((id === null || id === void 0 ? void 0 : id.toString()) || this.autoId(), this);
    }
    ;
    async getData() {
        if (!this.data) {
            this.data = Promise.resolve().then(() => this.dataSource.getData());
        }
        return this.data;
    }
    /**
     * Notifies the data source when the data has been updated.
     */
    async updateData() {
        // Data is modified in place on the original object instance
        if (this.dataSource.setData) {
            await this.dataSource.setData(await this.getData());
        }
    }
    async get() {
        return (0, manual_filter_1.applyManualFilters)({
            model: this.model,
            data: await this.getData(),
            filters: this.manualFilters,
            orderBy: this._orderBy,
            limit: this._limit,
            offset: this._offset,
        });
    }
    where(clause) {
        const filter = (0, convert_where_1.convertWhere)(this.model, clause, 'manualOnly');
        if (!filter) {
            return this;
        }
        const other = new VirtualCollection(this);
        other.manualFilters.push(filter);
        return other;
    }
    orderBy(field, directionStr = 'asc') {
        const other = new VirtualCollection(this);
        other._orderBy.push({ field, directionStr });
        return other;
    }
    limit(limit) {
        const other = new VirtualCollection(this);
        other._limit = limit;
        return other;
    }
    offset(offset) {
        const other = new VirtualCollection(this);
        other._offset = offset;
        return other;
    }
}
exports.VirtualCollection = VirtualCollection;
