import { DocumentReference, OrderByDirection, FieldPath, DocumentData, FirestoreDataConverter } from '@google-cloud/firestore';
import type { Collection, QuerySnapshot } from './collection';
import type { FirestoreFilter, StrapiOrFilter, StrapiWhereFilter } from '../types';
import { DeepReference } from './deep-reference';
import type { FirestoreConnectorModel } from '../model';
import type { ReadRepository } from '../utils/read-repository';
export declare class FlatCollection<T extends object = DocumentData> implements Collection<T> {
    readonly model: FirestoreConnectorModel<T>;
    readonly document: DocumentReference<{
        [id: string]: T;
    }>;
    readonly converter: FirestoreDataConverter<{
        [id: string]: T;
    }>;
    private readonly manualFilters;
    private readonly _orderBy;
    private _limit?;
    private _offset?;
    private _ensureDocument;
    constructor(model: FirestoreConnectorModel<T>);
    constructor(other: FlatCollection<T>);
    get path(): string;
    autoId(): string;
    doc(): DeepReference<T>;
    doc(id: string): DeepReference<T>;
    /**
     * Ensures that the document containing this flat collection exists.
     * This operation is cached, so that it will happen at most once
     * for the life of the model instance.
     */
    ensureDocument(): Promise<void>;
    get(repo?: ReadRepository): Promise<QuerySnapshot<T>>;
    where(clause: StrapiWhereFilter | StrapiOrFilter | FirestoreFilter): FlatCollection<T>;
    orderBy(field: string | FieldPath, directionStr?: OrderByDirection): FlatCollection<T>;
    limit(limit: number): FlatCollection<T>;
    offset(offset: number): FlatCollection<T>;
}
