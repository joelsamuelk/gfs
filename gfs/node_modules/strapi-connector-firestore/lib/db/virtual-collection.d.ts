import { OrderByDirection, FieldPath, DocumentData } from '@google-cloud/firestore';
import type { Collection, QuerySnapshot } from './collection';
import type { Converter, FirestoreFilter, StrapiOrFilter, StrapiWhereFilter } from '../types';
import type { FirestoreConnectorModel } from '../model';
import { VirtualReference } from './virtual-reference';
export declare class VirtualCollection<T extends object = DocumentData> implements Collection<T> {
    readonly model: FirestoreConnectorModel<T>;
    readonly converter: Required<Converter<T>>;
    private dataSource;
    private data;
    private readonly manualFilters;
    private readonly _orderBy;
    private _limit?;
    private _offset?;
    constructor(model: FirestoreConnectorModel<T>);
    constructor(other: VirtualCollection<T>);
    get path(): string;
    autoId(): string;
    doc(): VirtualReference<T>;
    doc(id: string): VirtualReference<T>;
    getData(): Promise<{
        [id: string]: T;
    }>;
    /**
     * Notifies the data source when the data has been updated.
     */
    updateData(): Promise<void>;
    get(): Promise<QuerySnapshot<T>>;
    where(clause: StrapiWhereFilter | StrapiOrFilter | FirestoreFilter): VirtualCollection<T>;
    orderBy(field: string | FieldPath, directionStr?: OrderByDirection): VirtualCollection<T>;
    limit(limit: number): VirtualCollection<T>;
    offset(offset: number): VirtualCollection<T>;
}
