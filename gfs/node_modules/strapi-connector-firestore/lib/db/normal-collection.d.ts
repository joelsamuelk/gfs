import { FieldPath, DocumentData, CollectionReference, FirestoreDataConverter } from '@google-cloud/firestore';
import type { Collection, QuerySnapshot } from './collection';
import type { FirestoreFilter, StrapiOrFilter, StrapiWhereFilter } from '../types';
import type { FirestoreConnectorModel } from '../model';
import { NormalReference } from './normal-reference';
import type { ReadRepository } from '../utils/read-repository';
export declare class NormalCollection<T extends object = DocumentData> implements Collection<T> {
    readonly model: FirestoreConnectorModel<T>;
    readonly converter: FirestoreDataConverter<T>;
    readonly collection: CollectionReference<T>;
    private readonly allowNonNativeQueries;
    private readonly maxQuerySize;
    private readonly manualFilters;
    private query;
    private _limit?;
    private _offset?;
    constructor(other: NormalCollection<T>);
    constructor(model: FirestoreConnectorModel<T>);
    get path(): string;
    autoId(): string;
    doc(): NormalReference<T>;
    doc(id: string): NormalReference<T>;
    private warnQueryLimit;
    get(trans?: ReadRepository): Promise<QuerySnapshot<T>>;
    where(clause: StrapiWhereFilter | StrapiOrFilter | FirestoreFilter): NormalCollection<T>;
    orderBy(field: string | FieldPath, directionStr?: "desc" | "asc"): NormalCollection<T>;
    limit(limit: number): NormalCollection<T>;
    offset(offset: number): NormalCollection<T>;
}
