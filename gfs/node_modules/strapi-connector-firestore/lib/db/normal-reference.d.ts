import type { DocumentReference, DocumentSnapshot } from '@google-cloud/firestore';
import { Reference, SetOpts, Snapshot } from './reference';
import type { NormalCollection } from './normal-collection';
/**
 * Acts as a wrapper around a native `DocumentReference`,
 */
export declare class NormalReference<T extends object> extends Reference<T> {
    readonly ref: DocumentReference<T>;
    readonly parent: NormalCollection<T>;
    constructor(ref: DocumentReference<T>, parent: NormalCollection<T>);
    get id(): string;
    get path(): string;
    get firestore(): FirebaseFirestore.Firestore;
    delete(opts?: SetOpts): Promise<void>;
    create(data: T, opts?: SetOpts): Promise<T>;
    create(data: Partial<T>, opts?: SetOpts): Promise<Partial<T>>;
    update(data: T, opts?: SetOpts): Promise<T>;
    update(data: Partial<T>, opts?: SetOpts): Promise<Partial<T>>;
    /**
     * Performs a `create()`, `update()`, or `delete()` operation without any coercion or lifecycles.
     * @private
     * @deprecated For internal connector use only
     */
    writeInternal(data: Partial<T> | undefined, editMode: 'create' | 'update'): Promise<void>;
    get(): Promise<Snapshot<T>>;
    isEqual(other: any): boolean;
    /**
     * Allow serialising to JSON.
     */
    toJSON(): string;
    /**
     * Returns a value that can be serialised
     * to Firestore.
     */
    toFirestoreValue(): DocumentReference<T>;
    toString(): string;
}
export declare function makeNormalSnap<T extends object>(ref: NormalReference<T>, snap: DocumentSnapshot<T>): Snapshot<T>;
