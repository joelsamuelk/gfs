import type { AttributeKey, ConnectorOptions, ModelOptions, Strapi, StrapiAttribute, StrapiModel, StrapiModelRecord } from './types';
import { PickReferenceKeys, PopulatedByKeys } from './populate';
import type { Collection } from './db/collection';
import { FieldPath, Firestore } from '@google-cloud/firestore';
import type { Transaction, TransactionOpts } from './db/transaction';
import type { RelationHandler } from './utils/relation-handler';
import { AttributeIndexInfo } from './utils/components-indexing';
import type { Snapshot } from './db/reference';
export declare const DEFAULT_CREATE_TIME_KEY = "createdAt";
export declare const DEFAULT_UPDATE_TIME_KEY = "updatedAt";
/**
 * Iterates each model in a the given of models.
 */
export declare function eachModel<M extends StrapiModel<any> = FirestoreConnectorModel<any>>(models: StrapiModelRecord): Generator<{
    model: M;
    target: object;
    key: string;
}>;
/**
 * Iterates all models in the Strapi instance.
 * @param strapiInstance Defaults to global Strapi
 */
export declare function allModels<M extends StrapiModel<any> = FirestoreConnectorModel<any>>(strapiInstance?: Strapi): Generator<{
    model: M;
    target: object;
    key: string;
}>;
/**
 * Firestore connector implementation of the Strapi model interface.
 */
export interface FirestoreConnectorModel<T extends object = object> extends StrapiModel<T> {
    options: Required<ModelOptions<T>>;
    defaultPopulate: PickReferenceKeys<T>[];
    assocKeys: AttributeKey<T>[];
    componentKeys: AttributeKey<T>[];
    /**
     * If this model is a component, then this is a list of indexer
     * information for all of the indexed fields.
     */
    indexers: AttributeIndexInfo[] | undefined;
    isComponent: boolean;
    relations: RelationHandler<T, any>[];
    firestore: Firestore;
    db: Collection<T>;
    timestamps: [string, string] | false;
    /**
     * Gets the path of the field to store the metadata/index
     * map for the given repeatable component attribute.
     */
    getMetadataMapKey(attrKey: AttributeKey<T>): string;
    hasPK(obj: any): boolean;
    getPK(obj: any): string;
    getAttributePath(fieldOrPath: string | FieldPath): string;
    getAttribute(path: string | FieldPath): StrapiAttribute | undefined;
    getAttributeValue(path: string | FieldPath, snapshot: Pick<Snapshot<T>, 'id' | 'data'>): unknown;
    runTransaction<TResult>(fn: (transaction: Transaction) => TResult | PromiseLike<TResult>, opts?: TransactionOpts): Promise<TResult>;
    populate<K extends PickReferenceKeys<T>>(data: Snapshot<T>, transaction: Transaction, populate?: K[]): Promise<PopulatedByKeys<T, K>>;
    populateAll<K extends PickReferenceKeys<T>>(datas: Snapshot<T>[], transaction: Transaction, populate?: K[]): Promise<PopulatedByKeys<T, K>[]>;
}
export interface FirestoreConnectorModelArgs {
    firestore: Firestore;
    connectorOptions: Required<ConnectorOptions>;
    strapi: Strapi;
}
/**
 * Mounts the Firestore model implementation onto the existing instance of all Strapi models.
 * They are mounted onto the existing instance because that instance is already
 * propagated through many parts of Strapi's core.
 */
export declare function mountModels(args: FirestoreConnectorModelArgs): Promise<void>;
