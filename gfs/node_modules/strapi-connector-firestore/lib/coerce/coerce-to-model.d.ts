import type { FirestoreConnectorModel } from '../model';
import { StatusError } from '../utils/status-error';
import type { StrapiAttribute } from '../types';
export declare class CoercionError extends StatusError {
    constructor(message: string);
}
export interface CoerceOpts {
    editMode?: 'create' | 'update';
    timestamp?: Date;
}
/**
 * Attempts to coerce the data to the correct types based on the
 * given model schema, builds `Reference` instances for relations, and generates
 * index metadata for components.
 *
 * Designed to both coerce from user input, or rehydrate from Firestore.
 */
export declare function coerceToModel<T extends object>(model: FirestoreConnectorModel<T>, id: string | undefined, data: unknown, fieldPath: string | null | undefined, opts: CoerceOpts): T;
/**
 * Coerces a given attribute value to out of the value stored in Firestore to the
 * value expected by the given attribute schema.
 */
export declare function coerceAttrToModel(attr: StrapiAttribute | undefined, value: unknown, opts: CoerceOpts): unknown;
