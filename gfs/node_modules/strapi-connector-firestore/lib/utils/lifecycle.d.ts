import { CoerceOpts } from '../coerce/coerce-to-model';
import type { Reference, SetOpts } from '../db/reference';
import type { ReadWriteTransaction } from '../db/readwrite-transaction';
import type { ReadOnlyTransaction } from '../db/readonly-transaction';
export interface LifecycleArgs<T extends object> extends Required<CoerceOpts> {
    ref: Reference<T>;
    data: T | Partial<T> | undefined;
    transaction?: ReadWriteTransaction | ReadOnlyTransaction;
    opts: SetOpts | undefined;
    timestamp: Date;
}
/**
 * Runs the full lifecycle on the given reference including coercion and updating relations.
 * @returns The coerced data
 */
export declare function runUpdateLifecycle<T extends object>({ ref, data, editMode, opts, timestamp, transaction }: LifecycleArgs<T>): Promise<T | Partial<T> | undefined>;
