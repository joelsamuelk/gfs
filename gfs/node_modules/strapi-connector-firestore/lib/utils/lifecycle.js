"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runUpdateLifecycle = void 0;
const coerce_to_model_1 = require("../coerce/coerce-to-model");
const deep_reference_1 = require("../db/deep-reference");
const morph_reference_1 = require("../db/morph-reference");
const normal_reference_1 = require("../db/normal-reference");
const virtual_reference_1 = require("../db/virtual-reference");
const relations_1 = require("../relations");
/**
 * Runs the full lifecycle on the given reference including coercion and updating relations.
 * @returns The coerced data
 */
async function runUpdateLifecycle({ ref, data, editMode, opts, timestamp, transaction }) {
    const db = ref.parent;
    const newData = data ? (0, coerce_to_model_1.coerceToModel)(db.model, ref.id, data, null, { editMode, timestamp }) : undefined;
    if ((0, relations_1.shouldUpdateRelations)(opts)) {
        const runUpdateWithRelations = async (trans) => {
            const prevData = editMode === 'update'
                ? await trans.getAtomic(ref).then(snap => snap.data())
                : undefined;
            await (0, relations_1.relationsUpdate)(db.model, ref, prevData, newData, editMode, trans);
            trans.mergeWriteInternal(ref, newData, editMode);
        };
        if (transaction) {
            await runUpdateWithRelations(transaction);
        }
        else {
            await db.model.runTransaction(runUpdateWithRelations);
        }
    }
    else {
        if (transaction) {
            transaction.mergeWriteInternal(ref, newData, editMode);
        }
        else {
            if ((ref instanceof normal_reference_1.NormalReference)
                || (ref instanceof deep_reference_1.DeepReference)
                || (ref instanceof morph_reference_1.MorphReference)
                || (ref instanceof virtual_reference_1.VirtualReference)) {
                await ref.writeInternal(newData, editMode);
            }
            else {
                throw new Error(`Unknown type of reference: ${ref}`);
            }
        }
    }
    return newData;
}
exports.runUpdateLifecycle = runUpdateLifecycle;
