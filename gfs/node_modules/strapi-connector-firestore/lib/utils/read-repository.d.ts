import { DocumentReference, DocumentSnapshot, FieldPath, Query, QuerySnapshot } from '@google-cloud/firestore';
export interface ReadRepositoryHandler {
    getAll(refs: DocumentReference<any>[], fieldMasks?: (string | FieldPath)[]): Promise<DocumentSnapshot<any>[]>;
    getQuery(query: Query<any>): Promise<QuerySnapshot<any>>;
}
export interface RefAndMask {
    ref: DocumentReference;
    fieldMasks?: (string | FieldPath)[];
}
/**
 * Utility class for transactions that acts as a caching proxy for read operations.
 */
export declare class ReadRepository {
    private readonly handler;
    private readonly delegate?;
    private readCounter;
    private readonly cache;
    constructor(handler: ReadRepositoryHandler, delegate?: ReadRepository | undefined);
    get size(): number;
    get readCount(): number;
    /**
     * Gets the given documents, first from this repository's cache, then
     * from the delegate repository's cache, or finally from the database.
     * Documents fetched from the database are stored in the cache.
     *
     * If field masks are provided, then results can be fulfilled from non-masked
     * cache entries, but masked requests from the database will not be stored in the cache.
     */
    getAll(items: RefAndMask[]): Promise<DocumentSnapshot<any>[]>;
    getQuery(query: Query<any>): Promise<QuerySnapshot<any>>;
}
