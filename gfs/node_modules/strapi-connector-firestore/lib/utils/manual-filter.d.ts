import type { FieldPath, OrderByDirection } from '@google-cloud/firestore';
import type { Snapshot } from '../db/reference';
import type { FirestoreConnectorModel } from '../model';
import type { QuerySnapshot } from '../db/collection';
export declare type PartialSnapshot<T extends object> = Pick<Snapshot<T>, 'id' | 'data'>;
export interface ManualFilter {
    (data: PartialSnapshot<any>): boolean;
}
export interface OrderSpec {
    field: string | FieldPath;
    directionStr: OrderByDirection;
}
export interface ManualFilterArgs<T extends object> {
    model: FirestoreConnectorModel<T>;
    data: {
        [id: string]: T;
    };
    filters: ManualFilter[];
    orderBy: OrderSpec[];
    offset: number | undefined;
    limit: number | undefined;
}
export declare function applyManualFilters<T extends object>(args: ManualFilterArgs<T>): QuerySnapshot<T>;
